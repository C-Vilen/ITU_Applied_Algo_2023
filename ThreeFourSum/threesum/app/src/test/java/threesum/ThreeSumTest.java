/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package threesum;

import org.junit.Test;
import static org.junit.Assert.*;

public class ThreeSumTest {
    @Test 
    public void testCubic() {
        // Zero triplets
        assertNull(ThreeSum.threeSumCubic(
            new int [] { }
        ));

        // One triplet, no solution
        assertNull(ThreeSum.threeSumCubic(
            new int [] { 1, 2, 3 }
        ));

        // One triplet, not null
        assertNotNull(ThreeSum.threeSumCubic(
            new int [] { 1, 2, -3 }
        ));

        // One triplet, correct solution
        assertArrayEquals(new int[] { 1, 2, -3 },
           ThreeSum.threeSumCubic(new int [] { 
               1, 2, -3 
           })
        );

        // Two triplets, no solution
        assertNull(ThreeSum.threeSumCubic(
            new int [] { 1, 2, 3, 4, 5, 6 }
        ));

        // Two triplets, correct solution
        assertArrayEquals(new int[] { 1, 3, -4 },
            ThreeSum.threeSumCubic(new int [] { 
                1, 2, 3, -4, -5, -6 
            })
        );
    }

    @Test
    public void testQuadratic() {
        // Zero triplets
        assertNull(ThreeSum.threeSumQuadratic(
            new int [] { }
        ));

        // One triplet, no solution
        assertNull(ThreeSum.threeSumQuadratic(
            new int [] { 1, 2, 3 }
        ));

        // One triplet, not null
        assertNotNull(ThreeSum.threeSumQuadratic(
            new int [] { 1, 2, -3 }
        ));

        // One triplet, correct solution
        assertArrayEquals(new int[] { -3, 1, 2 },
           ThreeSum.threeSumQuadratic(new int [] { 
               1, 2, -3 
           })
        );

        // Two triplets, no solution
        assertNull(ThreeSum.threeSumQuadratic(
            new int [] { 1, 2, 3, 4, 5, 6 }
        ));

        // Two triplets, correct solution
        assertArrayEquals(new int[] { -5, 2, 3 },
            ThreeSum.threeSumQuadratic(new int [] { 
                1, 2, 3, -4, -5, -6 
            })
        );
    }

    @Test
    public void testHashMap() {
        // Zero triplets, no solution
        assertNull(ThreeSum.threeSumHashMap(
            new int [] { }
        ));

        // One triplet, no solution
        assertNull(ThreeSum.threeSumHashMap(
            new int [] { 1, 2, 3 }
        ));

        // One triplet, not null
        assertNotNull(ThreeSum.threeSumHashMap(
            new int [] { 1, 2, -3 }
        ));

        // One triplet, correct solution
        assertArrayEquals(new int[] { 1, 2, -3 },
           ThreeSum.threeSumHashMap(new int [] { 
               1, 2, -3 
           })
        );

        // Two triplets, no solution
        assertNull(ThreeSum.threeSumHashMap(
            new int [] { 1, 2, 3, 4, 5, 6 }
        ));

        // Two triplets, correct solution
        assertArrayEquals(new int[] { 1, 3, -4 },
            ThreeSum.threeSumHashMap(new int [] { 
                1, 2, 3, -4, -5, -6 
            })
        );
    }

    @Test
    public void testNewTreeSumHashMap(){
        // Two triplets, incorrect solution output
        assertNotEquals(new int[] { 1, 3, -4 },
            ThreeSum.newThreeSumHashMap(new int [] { 
                1, 2, 3, -4, -5, -6 
            })
        );
    }
}
